name: packer deployment

on:
  pull_request:
    branches:
      - main

jobs:
  build:
    name: CI
    runs-on: ubuntu-latest
    env:
      MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: GCloud authentication      
      id: 'auth'
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v2'

    - name: Setup `packer`
      uses: hashicorp/setup-packer@main
      id: setup
      with:
          version: ${{ env.PRODUCT_VERSION }}
    
    - name: Set up MySQL server
      run: |
        sudo systemctl start mysql
        sudo systemctl status mysql
        
    - name: create artifact
      run: |
        zip -r webapp.zip ./

    - name: Create secrets directory
      run: mkdir -p secrets
    
    - name: Set up environment variables
      run: |
        echo "DB_USER=${{ secrets.USERNAME }}" >> $GITHUB_ENV
        echo "DB_PASSWORD=${{ secrets.PASSWORD }}" >> $GITHUB_ENV
        echo "DB_NAME=${{ secrets.DATABASE }}" >> $GITHUB_ENV
        echo "DB_HOST=${{ secrets.HOST }}" >> $GITHUB_ENV
        echo "USERNAME=${{ secrets.USERNAME}}" > secrets/secrets.env
        echo "PASSWORD=${{ secrets.PASSWORD }}" >> secrets/secrets.env
        echo "DATABASE=${{ secrets.DATABASE }}" >> secrets/secrets.env
        echo "HOST=${{ secrets.HOST }}" >> secrets/secrets.env

    - name: Create MySQL  database
      run: |
        sudo mysql -u root -p"${{ secrets.MYSQL_ROOT_PASSWORD }}" -e "CREATE DATABASE IF NOT EXISTS $DATABASE;"
        sudo mysql -u root -p"${{ secrets.MYSQL_ROOT_PASSWORD }}" -e "CREATE USER '$USERNAME'@'localhost' IDENTIFIED BY '$PASSWORD';"
        sudo mysql -u root -p"${{ secrets.MYSQL_ROOT_PASSWORD }}" -e "GRANT ALL PRIVILEGES ON $DATABASE.* TO '$USERNAME'@'localhost';"
        sudo mysql -u root -p"${{ secrets.MYSQL_ROOT_PASSWORD }}" -e "FLUSH PRIVILEGES;"
      env:  
        DATABASE: ${{ secrets.DATABASE }}
        USERNAME: ${{ secrets.USERNAME }}
        PASSWORD: ${{ secrets.PASSWORD }} 

    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: 20 
    

        
    - name: Install dependencies
      run: npm install
      env:  
        NODE_ENV: test
    
    - name: Start the application
      run: |
        npm start &
      env:  
        NODE_ENV: test
    
    - name: Wait for the application to be ready
      run: |
        sleep 10
        until curl -s http://localhost:3000; do
          sleep 5
        done

    - name: run test
      run: npm test
      env:  
        NODE_ENV: test

    - name: Initialize Packer
      run: packer init packer/image.pkr.hcl
    
    - name: Check Formatting
      run: |
        packer fmt -check packer/image.pkr.hcl

    - name: Validate Packer Template
      run: packer validate packer/image.pkr.hcl
    
    - name: Generate Random ID
      id: generate_random_id
      run: |
        RANDOM_ID=$(date +%s | md5sum | head -c 6)
        echo "::set-output name=random_id::$RANDOM_ID"

    - name: Deploy packer image
      env:
         DB_PASSWORD: ${{ secrets.PASSWORD }}
         DB_USER: ${{secrets.USERNAME}}     
      run: |
          packer build -var 'project=${{ secrets.PROJECT_ID }}' packer/image.pkr.hcl
    
    - name: Create new Instance Template version
      run: |
        RANDOM_ID=$(echo ${{ steps.generate_random_id.outputs.random_id }})
        TEMPLATE_NAME="webapp-instance-template-${RANDOM_ID}"
        IMAGE_ID=$(gcloud compute images list --no-standard-images --format="table(NAME,CREATION_TIMESTAMP)" --sort-by="CREATION_TIMESTAMP" | tail -n 1)
        IMAGE_NAME="projects/${{ secrets.PROJECT_ID }}/global/images/${IMAGE_ID}"
        gcloud compute instance-templates create $TEMPLATE_NAME \
        --machine-type=${{ secrets.MACHINE_TYPE }} \
        --region=${{ secrets.REGION }} \
        --create-disk=image=$IMAGE_NAME,size=${{ secrets.DISK_SIZE }},type=${{ secrets.DISK_TYPE }},boot=yes,auto-delete=yes,kms-key=projects/${{ secrets.PROJECT_ID }}/locations/${{ secrets.REGION }}/keyRings/${{ secrets.KEY_NAME }}/cryptoKeys/vm-key \
        --tags=${{ secrets.TARGET_TAGS_HTTP }} \
        --scopes=${{ secrets.SCOPES }} \
        --service-account=${{ secrets.SERVICE_ACCOUNT }} \
        --network=${{ secrets.VPC_NETWORK }} \
        --subnet=${{ secrets.SUBNET }} \
        --instance-template-region=${{ secrets.REGION }}
        --metadata=startup-script="## Download secrets file and place it in /opt/webapp/secrets
        mkdir -p /opt/webapp/secrets
        rm -f /opt/webapp/secrets/secrets.env && echo \"HOST=${{ secrets.PROD_HOST }}\" > /opt/webapp/secrets/secrets.env
        echo \"USERNAME=${{ secrets.PROD_USER }}\" >> /opt/webapp/secrets/secrets.env
        echo \"PASSWORD=${{ secrets.PROD_PASS }}\" >> /opt/webapp/secrets/secrets.env
        echo \"DATABASE=${{ secrets.PROD_DATABASE }}\">> /opt/webapp/secrets/secrets.env
        echo \"startup=true\" >> /opt/webapp/secrets/secrets.env
        echo \"TOPIC=${{ secrets.PROD_TOPIC }}\" >> /opt/webapp/secrets/secrets.env
        echo \"PROJECT_ID=${{ secrets.PROJECT_ID }}\" >> /opt/webapp/secrets/secrets.env
        sudo systemctl start node" 
  
    - name: Start set and rolling update for Managed Instance Group
      run: |    
        RANDOM_ID=$(echo ${{ steps.generate_random_id.outputs.random_id }})
        TEMPLATE_NAME="webapp-instance-template-${RANDOM_ID}"   
        gcloud compute instance-groups managed rolling-action start-update webapp-instance-group-manager --version="template=projects/${{ secrets.GCP_PROJECT_ID }}/regions/${{ secrets.REGION }}/instanceTemplates/$TEMPLATE_NAME" --region=${{ secrets.REGION }}   

    - name: Wait for Managed Instance Group refresh to complete
      run: |    
        gcloud compute instance-groups managed wait-until webapp-instance-group-manager \
        --version-target-reached \
        --region=${{ secrets.REGION }}